1- 	(150)10 = (10010110)2 = 0x96
	Irá imprimir:
	0x96

	(-3)10: (3)10 = 0000 0011
	(-3)10 = 1111 1100 + 1 = 1111 1101 = 0xFD
	como é um short (2 bytes) irá imprimir:
	0xFD
	0XFF

	(-151)10: (151)10 = 1001 0111
	(-151)10 = 0110 1000 + 1 = 0110 1001 = 0x69
	como é um int (4 bytes) irá imprimir:
	0x69
	0xFF
	0xFF
	0xFF

2-	(-32765)10: (32765)10 = 0111 1111 1111 1101
	(-32765)10 = 1000 0000 0000 0010 + 1 = 1000 0000 0000 0011 = 0x8003
	como é um short (2 bytes) e a ordem de armazenamento é little endian irá imprimir:
	0x03
	0x80

	(32771)10 = 1000 0000 0000 0011 = 0x8003
	como é um short (2 bytes) e a ordem de armazenamento é little endian irá imprimir:
	0x03
	0x80

3- 	Usei (3-bytenum) para ver quantos bytes teria que deslocar para o byte solicitado estivesse no byte mais significativo.
	x & 0xFF000000 para desligar todos os bits menos o byte mais significativo.
	x >> 24 para deslocar o byte mais significativo para o byte menos significativo e já que x é um int ele irá preencher os bits com 1 na hora do shitf.

4-	Está comparando -1 com 2 e já -1<2 então irá imprimir que é menor.
	Apesar de imprimir que x = -1, na verdade x é unsigned int que vale 0xFFFFFFFF e quando comparado dois unsigned int 0xFFFFFFFF é maior que 2.
	O compilador converte o int para unsigned int caindo no caso anterior.

5- O código faz com que a variável sc aumente para 4 bytes e complete os bits com o bit mais significativo de sc.